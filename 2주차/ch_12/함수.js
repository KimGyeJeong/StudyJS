console.log('helloworld');
// ch.12 함수

// 프로그래밍 언어의 함수는 일련의 과정을 문(statement)으로 구현하고 코드 블록으로 감싸서 하나의 실행 단위로 정의한 것이다.
// 함수 내부로 입력을 전달받는 변수를 매개변수(parameter), 입력을 인수(argument), 출력을 반환값(return value) 이라 한다.
// 함수는 함수 정의(function definition)를 통해 생성한다.

// 함수를 사용하는 이유
// - 코드의 재사용
// - 유지보수의 편의성
// - 코드의 신뢰성
// - 코드의 가독성

// 일반 객체는 호출할 수 없지만 함수는 호출할 수 있다.
// 일반 객체에는 함수 객체만의 고유한 프로퍼티를 갖는다.
// 함수가 객체라는 사실은 다른 프로그래밍 언어와 구별되는 자바스크립트의 중요한 특징이다.

// 함수 정의
// - 함수 선언문
// function add(x, y) {
//     return x + y;
// }

// - 함수 표현식
// var add = function (x, y) {
//     return x + y;
// };

// - Function 생성자 함수
// var add = new Function('x', 'y', 'return x+y');
// - 화살표 함수
// var add = (x, y) => x + y;

// 모든 함수 정의 방식은 함수를 정의한다는 면에서 동일하다. 그러나 미요하지만 중요한 차이가 있다.


// 함수 선언문
// function add(x,y){
//     return x+y;
// }
// 함수 선언문은 함수 리터럴과 형태가 동일함. 함수 리터럴은 함수 이름을 생략할 수 있으나 함수 선언문은 함수 이름을 생략할 수 없음.
// 함수 선언문은 표현식이 아닌 문이다.
// 자바스크립트 엔진은 생성된 함수를 호출하기 위해 함수 이름과 동일한 이름의 식별자를 암묵적으로 생성하고, 거기에 함수 객체를 할당함.
// 함수는 함수 이름으로 호출하는 것이 아니라 함수 객체를 가리키는 식별자로 호출함.

// 함수 표현식
// var add = function (x,y){
//     return x+y;
// };
// 자바스크립트의 함수는 일급 객체이다.
// 함수가 일급 객체라는 것은 함수를 값처럼 자유롭게 사용할 수 있다는 의미다.

// 자바스크립트 엔진은 함수 선언문의 함수 이름으로 식별자를 암묵적 생성하고 생성된 함수 객체를 할당하므로 함수 표현식과 유사하게 동작하는 것처럼 보이지만,
//함수 선언문과 함수 표현식이 정확히 동일하게 동작하지는 않음.
// 함수 선언문은 표현식이 아닌 문. 함수 표현식은 표현식인 문. 따라서 미묘하지만 중요한 차이가 있다.


// 함수 선언문으로 정의한 함수는 함수 선언문 이전에 호출할 수 있다.
// 그러나 함수 표현식으로 정의한 함수는 함수 표현식 이전에 호출 할 수 없다.
// 함수 선언문으로 정의한 함수와 함수 표현식으로 정의한 함수의 생성 시점이 다르기 때문
// console.log(add);   //  [Function: add]
// console.dir(sub);   //  undefined
//
// console.log(add(2,6));  // 8
// console.log(sub(2,6));  // TypeError: sub is not a function
//
// //함수 선언문
// function add(x,y){
//     return x+y;
// }
// var sub = function (x,y){
//     return x-y;
// };

///////////////////
// 함수 선언문으로 함수를 정의하면 런타임 이전에 함수 객체가 먼저 생성됨.
// 함수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 함수 호이스팅(function hoisting)이라 함.

// 함수 표현식으로 함수를 정의하면 함수 호이스팅이 발생하는 것이 아니라 변수 호이스팅이 발생함.
// 변수 할당문의 값은 할당문이 실행되는 시점, 즉 런타임에 평가되므로 함수 표현식의 함수 리터럴도 할당문이 실행되는 시점에 평가되어 함수 객체가 됨.
///////////////////

// Function 생성자 함수
// 생성자 함수로 함수를 생성하는 방식은 일반적이지 않으며 바람직하지 않다. Function 생성자 함수로 생성한 함수는 클로저(closure)를 생성하지 않는등,
// 함수 선언문이나 함수 표현식으로 생성한 함수와 다르게 동작함.

// 화살표 함수
// 화살표 함수는 항상 익명 함수로 정의함
const add = (x, y) => x+y;
console.log(add(2,5));
// 기존의 함수 선언문 또는 함수 표현식을 완전히 대체하기 위해 디자인된것은 아니다.
// 화살표 함수는 기존의 함수보다 표현만 간략한 것이 아니라 내부 동작 또한 간략화 되어 있다.