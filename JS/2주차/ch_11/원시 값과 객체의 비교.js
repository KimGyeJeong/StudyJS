console.log('helloworld');
// ch.11 원시 값과 객체의 비교

// 원시 타입과 객체 타입은 크게 세가지 측면에서 다름
// - 원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이다. 객체(참조) 타입의 값은 변경 가능한 값(mutable value)이다.
// - 원시 값을 변수에 할당하면 변수(확보된 메모리 공간)에는 실제 값이 저장되지만, 객체를 변수에 할당하면 변수(확보된 메모리 공간)에는 참조 값이 저장됨.
// - 값에 의한 전달(pass by value): 원시 값을 갖는 변수를 다른 변수에 할당하면 원본의 원시 값이 복사되어 전달.
//   참조에 의한 전달(pass by reference): 객체를 가리키는 변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달됨

// 원시타입의 값은 변경 불가능한 값으로 읽기전용 read-only 값으로서 변경할수 없다.
// 변경 불가능하다는것은 변수가 아니라 값에 대한 진술이다.
// 변수의 상대 개념인 상수는 재할당이 금지된 변수를 말한다.

// 불변성 immutability
// - 변수 값을 변경하기 위해 원시 값을 재할당하면 새로운 메모리 공간을 확보하고 재할당한 값을 저장한 후, 변수가 참조하던 메모리 공간의 주소를 변경함.
// - 불변성을 갖는 원시 값을 할당한 변수는 재할당 이외에 변수 값을 변경할 수 있는 방법이 없다.
// 재할당 이외에 원시 값인 변수 값을 변경할 수 있다면 예기치 않게 변수 값이 변경될수 있어 상태 변경을 추적하기 어렵게 만듬.

// 값에 의한 전달
// - 변수에 원시 값을 갖는 변수를 할당하면 할당받는 변수에는 할당되는 변수의 원시값이 복사되어 전달됨.
// - 다른 메모리 공간에 저장된 별개의 값

// 객체는 변경 가능한 값(mutable value). 
// 원시값은 변경 불가능하 값이므로 원시 값을 갖는 변수의 값을 변경하려면 재할당 외에는 방법이 없다.
// 하지만 객체는 변경 가능한 값이다. 따라서 객체를 할당한 변수는 재할당 없이 객체를 직접 변경할 수 있다.
// 즉, 재할당 없이 프로퍼티를 동적으로 추가할 수도 있고 프로퍼티 값을 갱신할 수도 있으며 프로퍼티 자체를 삭제할 수도 있다.
// var person = {
//     name : 'Lee'
// };
// // 프로퍼티 값 갱신
// person.name = 'Kim';
// // 프로퍼티 동적 생성
// person.address = 'Seoul';
// console.log(person);

// 객체는 여러개의 식별자가 하나의 객체를 공유할 수 있다는 단점이 있다.


// 참조에 의한 전달
// - 객체를 가리키는변수를 다른 변수에 할당하면 원본의 참조 값이 복사되어 전달됨.
// 두 개의 식별자가 하나의 객체를 공유
// 한족에서 객체를 변경하면 서로 영향을 주고 받음

var person1 = {
    name : 'Lee'
};
var person2 = {
    name : 'Lee'
};
var person1_copy = person1;

console.log(person1 === person2);           //  false
console.log(person1.name === person2.name); //  true
console.log(person1 === person1_copy);      //  true

person1_copy.age = 30;
console.log(person1);   //{ name: 'Lee', age: 30 }